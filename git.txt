$ mkdir learngit    //创建文件夹
$ cd learngit        //进入该文件夹
$ pwd                 //查看当前目录
/Users/michael/learngit

$ git init                   //创建git管理仓库
Initialized empty Git repository in /Users/michael/learngit/.git/

$ git add readme.txt          //添加文件

$ git commit -m "wrote a readme file"                    //提交文件，-m后为提交说明 
[master (root-commit) eaadf4e] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt

commit 没有-m输入备注信息时进入vim窗口操作步骤： 
1.摁键盘i,最下面有所变化
2.此时光标在最上面，输入要替提交的说明'comment',嗯Esc,然后输入:,光标跑到了最下面
3.输入wq之后，摁回车即可，就要回到了原始的命令行界面

$ git add testFile1.txt testFile2.txt            //一次性添加多个文件

$ git status     //查看当前目录下有哪些文件有修改

$ git diff ***.txt      //查看文件做了哪些修改
关于git diff 无输出问题：
比较工作区与版本库最新版本，若无变化，则无输出

$ git diff HEAD -- readme.txt               //命令可以查看工作区和版本库里面最新版本的区别

$ git log --pretty=oneline               //查看版本号（后缀部分用于把版本号集成于一行）

$ git reset --hard HEAD^         //版本回退（向上回退一个版本），HEAD^^（上上个版本），HEAD~100即向上回退100个版本
HEAD is now at e475afc add distributed

$ git reset --hard 1094a          //去到固定版本（版本号无需输全），可以用于版本回退后前进版本
HEAD is now at 83b0afe append GPL

$ cat readme.txt               //查看文件内容

$ git reflog                   //查看版本历史记录，commit id

$ git checkout -- file            //可以丢弃工作区的修改,加入暂存区后无效

$ git reset HEAD <file>             //可以把暂存区的修改撤销掉（unstage），重新放回工作区

$ git reset .                    //清空暂存区

$ rm test.txt        //删除文件（删除的是工作区的文件，即本地文件）

$ git rm test.txt        //将删除文件添加到工作区（若本地未删除此文件，则会删除本地文件），此时想要恢复本地文件，需要先git reset HEAD <file>，然后再git checkout -- <file>

$ git checkout -- test.txt           //误删除后，重新加载版本库中文件到工作区

$ ssh-keygen -t rsa -C "youremail@example.com"      //创建本地ssh key，若有则无需执行

$ git remote add origin git@github.com:Raoyy/execited.git    //关联一个远程库（origin为远程库名，一般默认取此名）
fatal: remote origin already exists.    //出现该错误时，执行$ git remote rm origin先删除，再重新关联

$ git push -u origin master      //-u在第一次提交时使用，可以把本地仓库与远程关联，以后提交就可以简化如下
$ git push origin master          //可以直接简写为git push

$ git add 文件夹/            //添加整个文件夹及内容

$ git add *.文件类型         //添加目录中所有此文件类型的文件

git add -A                   //提交所有变化
git add -u                   //提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)
git add .                   //提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件

git中出现>符号 可以ctrl+d退出

$ git clone git@github.com:michaelliao/gitskills.git                  //从远程库克隆到本地

$ git fetch origin master      //从远程origin仓库的master主分支更新最新的版本到origin/master分支上。

$ git log -p master..origin/master    //比对下当前本地master分支和origin/master分支的区别

$ git merge origin/master             //把origin/master分支上的内容合并到本地master分支,合并后先提交，冲突部分之后修改提交

舍弃本地代码,远端版本覆盖本地版本(慎重)
$:git fetch --all
$:git reset --hard origin/master
$:git fetch



创建新的分支dev：
$ git checkout -b dev
Switched to a new branch 'dev'

git checkout命令加上-b参数表示创建并切换，相当于：
$ git branch dev                             //创建分支
$ git checkout dev                           //切换分支
Switched to branch 'dev'

然后，用git branch命令查看当前分支：
$ git branch                                 //查看分支
* dev
  master
  
dev分支的工作完成，我们就可以切换回master分支：
$ git checkout master
Switched to branch 'master'

把dev分支的工作成果合并到master分支上：
$ git merge dev                                //合并分支
Updating d46f35e..b17d20e
Fast-forward
 readme.txt | 1 +
 1 file changed, 1 insertion(+)
 
$ git log --graph                              //查看分支合并图（git log  --graph --pretty=oneline --abbrev-commit）
 
删除dev分支
$ git branch -d dev                            //删除分支
Deleted branch dev (was b17d20e).

$ git branch -D <name>                           //强行删除分支

//禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息,合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
$ git merge --no-ff -m "merge with no-ff" dev   

$ git stash                                     //将工作区内容隐匿
Saved working directory and index state WIP on dev: f52c633 add merge

$ git stash list                  //查看隐匿区内容

取消暂存内容：
方法一：
$ git stash apply                 //恢复，但是恢复后，藏匿内容并不删除
$ git stash drop                  //删除隐匿区内容
方法二：
$ git stash pop                   //恢复的同时把藏匿内容也删了

$ git remote                      //查看远程库信息
origin

$ git remote -v                   //查看更加详细的信息
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)

$ git push origin master          //推送分支，如果要推送其他分支，比如dev，就改成：$ git push origin dev

多人协作：
$ git push origin <branch-name>            //推送自己的修改

$ git pull                                //如果推送失败，则因为远程分支比你的本地更新，先需要用git pull 试图合并;

如果合并有冲突，则解决冲突，并在本地提交;

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。


git 忽略不必要的提交文件：
1.首先在仓库中创建隐藏文件“.gitignore”,选中本地仓库，右击“Git Bash Here”,然后执行如下命令：
touch .gitignore
2.用文本编辑器如editplus或notepad++输入需要忽略的文件或文件名，如下所示：
##ignore this file##
/target/ 
.classpath
.project
.settings      
 ##filter databfile、sln file##
*.mdb  
*.ldb  
*.sln    
##class file##
*.com  
*.class  
*.dll  
*.exe  
*.o  
*.so  
# compression file
*.7z  
*.dmg  
*.gz  
*.iso  
*.jar  
*.rar  
*.tar  
*.zip  
*.via
*.tmp
*.err 
# OS generated files #  
.DS_Store  
.DS_Store?  
._*  
.Spotlight-V100  
.Trashes  
Icon?  
ehthumbs.db  
Thumbs.db

备注：
/target/ ：过滤文件设置，表示过滤这个文件夹
*.mdb  ，*.ldb  ，*.sln 表示过滤某种类型的文件
/mtk/do.c ，/mtk/if.h  表示指定过滤某个文件下具体文件
 !*.c , !/dir/subdir/     !开头表示不过滤
 *.[oa]    支持通配符：过滤repo中所有以.o或者.a为扩展名的文件
